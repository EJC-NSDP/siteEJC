// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DATABASE_URL_UNPOOLED")
}

model Pessoa {
  id           String  @id @default(uuid())
  nome         String
  sobrenome    String
  apelido      String?
  endereco_cep String
  celular      String
  telefone     String?
  email        String  @unique
  password     String?
  avatar_url   String?

  created_at  DateTime @default(now())
  modified_at DateTime @updatedAt

  cep                Endereco        @relation(fields: [endereco_cep], references: [cep])
  encontrista        Encontrista?
  tioAparenteCirculo Circulo?        @relation("TioAparente")
  tioSecretoCirculo  Circulo?        @relation("TioSecreto")
  pessoaMotorista    Carro[]         @relation("PessoaMotorista")
  pessoaCarona       Carro[]         @relation("PessoaCarona")
  carroEncontro      CarroEncontro[]
  encontreiro        Encontreiro[]

  accounts Account[]
  sessions Session[]

  @@map("pessoas")
}

model Encontrista {
  id_pessoa           String  @unique
  id_status           String
  id_religiao         String
  is_autofill         String
  end_numero          String
  end_complemento     String
  id_bairro_encontro  String
  id_moracom          String
  id_paissep          String
  movimento_anterior  String
  observacao          String
  nome_contato1       String
  tel_contato1        String
  parentesco_contato1 String
  nome_contato2       String?
  tel_contato2        String?
  parentesco_contato2 String?

  created_at  DateTime @default(now())
  modified_at DateTime @updatedAt

  pessoa         Pessoa               @relation(fields: [id_pessoa], references: [id])
  status         DomainStatus         @relation(fields: [id_status], references: [id])
  religiao       DomainReligiao       @relation(fields: [id_religiao], references: [id])
  bairroEncontro DomainBairroEncontro @relation(fields: [id_bairro_encontro], references: [value])
  moraCom        DomainMoraCom        @relation(fields: [id_moracom], references: [id])
  statusPais     DomainStatusPais     @relation(fields: [id_paissep], references: [id])

  @@map("encontristas")
}

model Encontreiro {
  id_pessoa           String  @unique
  nascimento          String
  instagram           String
  restricao_alimentar String?
  id_tamanho_camisa   String
  id_encontro         String
  id_circulo          String?

  pessoa        Pessoa              @relation(fields: [id_pessoa], references: [id])
  encontro      Encontro            @relation(fields: [id_encontro], references: [id])
  tamanhoCamisa DomainTamanhoCamisa @relation(fields: [id_tamanho_camisa], references: [id])
  circulo       Circulo?            @relation(fields: [id_circulo], references: [id])

  @@map("encontreiros")
}

model Encontro {
  id              String   @id @default(cuid())
  numero_encontro Int      @unique
  data_inicio     DateTime @unique
  data_tema       DateTime @unique
  id_local        String
  tema_espiritual String
  tema_fantasia   String
  numero_circulos Int

  local         Local           @relation(fields: [id_local], references: [id])
  encontreiro   Encontreiro[]
  circulo       Circulo[]
  carroEncontro CarroEncontro[]

  @@map("encontros")
}

model Circulo {
  id                  String @id @default(cuid())
  id_cor_circulo      Int
  id_tio_aparente     String @unique
  id_tio_secreto      String @unique
  numero_encontristas Int
  id_encontro         String

  encontro    Encontro         @relation(fields: [id_encontro], references: [id])
  corCirculo  DomainCorCirculo @relation(fields: [id_cor_circulo], references: [id])
  tioAparente Pessoa?          @relation("TioAparente", fields: [id_tio_aparente], references: [id])
  tioSecreto  Pessoa?          @relation("TioSecreto", fields: [id_tio_secreto], references: [id])
  encontreiro Encontreiro[]

  @@map("circulos")
}

model Endereco {
  cep    String @id @unique
  estado String
  cidade String
  bairro String
  rua    String

  created_at  DateTime @default(now())
  modified_at DateTime @updatedAt

  pessoa Pessoa[]
  local  Local[]

  @@map("enderecos")
}

model Local {
  id           String @id @default(uuid())
  endereco_cep String
  nome_local   String
  numero_local String

  endereco Endereco   @relation(fields: [endereco_cep], references: [cep])
  encontro Encontro[]

  @@map("locais")
}

model Carro {
  id                   String  @id @default(cuid())
  id_motorista         String
  id_carona            String?
  modelo_carro         String
  placa_carro          String
  lugares_carro        Int
  observacao_motorista String

  pessoaMotorista Pessoa          @relation("PessoaMotorista", fields: [id_motorista], references: [id])
  pessoaCarona    Pessoa?         @relation("PessoaCarona", fields: [id_carona], references: [id])
  carroEncontro   CarroEncontro[]

  @@unique([id_motorista, placa_carro])
  @@map("carros")
}

model CarroEncontro {
  id_carro       String
  id_encontrista String
  id_encontro    String

  carro       Carro    @relation(fields: [id_carro], references: [id])
  encontrista Pessoa   @relation(fields: [id_encontrista], references: [id])
  encontro    Encontro @relation(fields: [id_encontro], references: [id])

  @@id([id_carro, id_encontrista, id_encontro])
  @@map("carro_encontro")
}

//Domains

model DomainStatus {
  id     String @id @unique
  status String @unique

  encontrista Encontrista[]

  @@map("domainStatus")
}

model DomainReligiao {
  id       String @id @unique
  religiao String @unique

  encontrista Encontrista[]

  @@map("domainReligiao")
}

model DomainBairroEncontro {
  id     Int    @id
  value  String @unique
  bairro String @unique
  zona   String

  encontrista Encontrista[]

  @@map("domainBairroEncontro")
}

model DomainMoraCom {
  id       String @id @unique
  mora_com String @unique

  encontrista Encontrista[]

  @@map("domainMoraCom")
}

model DomainStatusPais {
  id          String @id @unique
  status_pais String @unique

  encontrista Encontrista[]

  @@map("domainStatusPais")
}

model DomainTamanhoCamisa {
  id             String @id @unique
  tamanho_camisa String @unique

  encontreiro Encontreiro[]

  @@map("domainTamanhoCamisa")
}

model DomainCorCirculo {
  id  Int    @id @default(autoincrement())
  cor String @unique

  circulo Circulo[]

  @@map("domainCorCirculo")
}

//Next-Auth/Prisma Adapter

model Account {
  user_id             String
  type                String
  provider            String
  provider_account_id String
  refresh_token       String?
  access_token        String?
  expires_at          Int?
  token_type          String?
  scope               String?
  id_token            String?
  session_state       String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user Pessoa @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@id([provider, provider_account_id])
  @@map("accounts")
}

model Session {
  session_token String   @unique
  user_id       String
  expires       DateTime

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  user Pessoa @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("sessions")
}

// model VerificationToken {
//   identifier String
//   token      String
//   expires    DateTime

//   @@unique([identifier, token])
//   @@map("verification_tokens")
// }
