generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_PUBLIC_URL")
}

model Pessoa {
  id                 String       @id @default(uuid())
  nome               String
  sobrenome          String
  celular            String
  telefone           String?
  email              String       @unique
  createdAt          DateTime     @default(now()) @map("created_at")
  modifiedAt         DateTime     @updatedAt @map("modified_at")
  enderecoCep        String       @map("endereco_cep")
  avatarUrl          String?      @map("avatar_url")
  password           String?
  apelido            String?
  role               Role         @default(ENCONTRISTA)
  slug               String       @unique
  enderecoNumero     Int?         @map("endereco_numero")
  changePassword     Boolean      @default(false)
  accounts           Account[]
  pessoaCarona       Carro[]      @relation("PessoaCarona")
  pessoaMotorista    Carro[]      @relation("PessoaMotorista")
  cartasDigitais     Carta[]
  tioAparenteCirculo Circulo?     @relation("TioAparente")
  tioSecretoCirculo  Circulo?     @relation("TioSecreto")
  encontreiro        Encontreiro?
  encontrista        Encontrista?
  endereco           Endereco     @relation(fields: [enderecoCep], references: [cep])
  sessions           Session[]
  lider              Lideranca[]

  @@map("pessoas")
}

model Encontrista {
  idPessoa               String              @id @map("id_pessoa")
  endComplemento         String              @map("end_complemento")
  movimentoAnterior      String?             @map("movimento_anterior")
  observacao             String?
  nomeContato1           String              @map("nome_contato1")
  telContato1            String              @map("tel_contato1")
  parentescoContato1     String              @map("parentesco_contato1")
  nomeContato2           String?             @map("nome_contato2")
  telContato2            String?             @map("tel_contato2")
  parentescoContato2     String?             @map("parentesco_contato2")
  createdAt              DateTime            @default(now()) @map("created_at")
  modifiedAt             DateTime            @updatedAt @map("modified_at")
  indicadoPorApelido     String?             @map("indicado_por_apelido")
  indicadoPorEmail       String?             @map("indicado_por_email")
  indicadoPorNome        String?             @map("indicado_por_nome")
  indicadoPorTel         String?             @map("indicado_por_tel")
  isAutofill             Boolean             @map("is_autofill")
  idStatus               Value_Status        @map("id_status")
  idReligiao             Value_Religiao      @map("id_religiao")
  idMoracom              Value_MoraCom       @map("id_moracom")
  idStatusPais           Value_StatusPais    @map("id_statusPais")
  cartasFisicas          Int                 @default(0) @map("cartas_fisicas")
  idCarroEncontro        String?             @map("id_carro_encontro")
  cepEncontro            String?             @map("cep_encontro")
  endComplementoEncontro String?             @map("end_complemento_encontro")
  endNumEncontro         Int?                @map("end_num_encontro")
  obsExternaConhecidos   String?             @map("obs_externa_conhecidos")
  obsExternaLocalizacao  String?             @map("obs_externa_localizacao")
  obsExternaOutros       String?             @map("obs_externa_outros")
  obsExternaSaude        String?             @map("obs_externa_saude")
  cartasOk               Boolean             @default(false) @map("cartas_ok")
  familiaOk              Boolean             @default(false) @map("familia_ok")
  generosaOk             Boolean             @default(false) @map("generosa_ok")
  enderecoEncontro       Endereco?           @relation(fields: [cepEncontro], references: [cep])
  carroEncontro          CarroEncontro?      @relation(fields: [idCarroEncontro], references: [id])
  moraCom                DomainMoraCom       @relation(fields: [idMoracom], references: [id])
  pessoa                 Pessoa              @relation(fields: [idPessoa], references: [id], onDelete: Cascade)
  religiao               DomainReligiao      @relation(fields: [idReligiao], references: [id])
  statusPais             DomainStatusPais    @relation(fields: [idStatusPais], references: [id])
  status                 DomainStatus        @relation(fields: [idStatus], references: [id])
  responsavelExterna     ResponsavelExterna?

  @@map("encontristas")
}

model Encontreiro {
  idPessoa                String                 @id @map("id_pessoa")
  instagram               String?
  restricaoAlimentar      String?                @map("restricao_alimentar")
  idEncontro              String?                @map("id_encontro")
  idCirculo               String?                @map("id_circulo")
  idTamanhoCamisa         Value_TamanhoCamisa?   @map("id_tamanho_camisa")
  obsBanda                String?                @map("obs_banda")
  observacoes             String?
  statusMontagem          StatusEncontreiro?
  dataNasc                DateTime               @map("data_nasc")
  idDisponibilidade       Value_Disponibilidade  @default(NAO_PREENCHEU) @map("id_disponibilidade")
  responsavelCarroExterna CarroEncontro[]        @relation("PessoaResponsavelExterna")
  circulo                 Circulo?               @relation(fields: [idCirculo], references: [id])
  disponibilidade         DomainDisponibilidade? @relation(fields: [idDisponibilidade], references: [id])
  encontro                Encontro?              @relation(fields: [idEncontro], references: [id])
  pessoa                  Pessoa                 @relation(fields: [idPessoa], references: [id], onDelete: Cascade)
  tamanhoCamisa           DomainTamanhoCamisa?   @relation(fields: [idTamanhoCamisa], references: [id])
  equipeEncontro          EquipeEncontro[]
  equipeMontagem          EquipeMontagem?
  listaPreferencias       ListaPreferencia[]
  responsavelExterna      ResponsavelExterna[]

  @@map("encontreiros")
}

model Encontro {
  id                 String               @id @default(uuid())
  numeroEncontro     Int                  @unique @map("numero_encontro")
  idLocal            String               @map("id_local")
  temaEspiritual     String?              @map("tema_espiritual")
  temaFantasia       String?              @map("tema_fantasia")
  numeroCirculos     Int                  @map("numero_circulos")
  dataInicio         DateTime             @unique @map("data_inicio")
  dataTema           DateTime             @unique @map("data_tema")
  createdAt          DateTime             @default(now()) @map("created_at")
  modifiedAt         DateTime             @updatedAt @map("modified_at")
  ordemCirculos      Int                  @default(12345) @map("ordem_circulos")
  isReceivingCartas  Boolean              @default(false) @map("is_receiving_cartas")
  carroEncontro      CarroEncontro[]
  circulo            Circulo[]
  encontreiro        Encontreiro[]
  local              Local                @relation(fields: [idLocal], references: [id])
  EquipeEncontro     EquipeEncontro[]
  palestrantes       Palestrantes[]
  ResponsavelExterna ResponsavelExterna[]

  @@map("encontros")
}

model Circulo {
  id            String           @id @default(uuid())
  idCorCirculo  Int              @map("id_cor_circulo")
  idTioAparente String?          @unique @map("id_tio_aparente")
  idTioSecreto  String?          @unique @map("id_tio_secreto")
  idEncontro    String           @map("id_encontro")
  nome          String?
  corCirculo    DomainCorCirculo @relation(fields: [idCorCirculo], references: [id])
  encontro      Encontro         @relation(fields: [idEncontro], references: [id])
  tioAparente   Pessoa?          @relation("TioAparente", fields: [idTioAparente], references: [id])
  tioSecreto    Pessoa?          @relation("TioSecreto", fields: [idTioSecreto], references: [id])
  encontreiro   Encontreiro[]

  @@map("circulos")
}

model Endereco {
  cep         String        @id
  estado      String
  cidade      String
  bairro      String
  rua         String
  createdAt   DateTime      @default(now()) @map("created_at")
  modifiedAt  DateTime      @updatedAt @map("modified_at")
  Encontrista Encontrista[]
  local       Local[]
  pessoa      Pessoa[]

  @@map("enderecos")
}

model Local {
  id          String     @id @default(uuid())
  enderecoCep String     @map("endereco_cep")
  nomeLocal   String     @map("nome_local")
  numeroLocal String     @map("numero_local")
  encontro    Encontro[]
  endereco    Endereco   @relation(fields: [enderecoCep], references: [cep])

  @@map("locais")
}

model Carro {
  id                  String          @id @default(uuid())
  idMotorista         String          @map("id_motorista")
  modeloCarro         String          @map("modelo_carro")
  placaCarro          String          @map("placa_carro")
  lugaresCarro        Int             @map("lugares_carro")
  observacaoMotorista String          @map("observacao_motorista")
  idCarona            String?         @map("id_carona")
  carroEncontro       CarroEncontro[]
  pessoaCarona        Pessoa?         @relation("PessoaCarona", fields: [idCarona], references: [id])
  pessoaMotorista     Pessoa          @relation("PessoaMotorista", fields: [idMotorista], references: [id])

  @@unique([idMotorista, placaCarro])
  @@map("carros")
}

model CarroEncontro {
  idCarro     String        @map("id_carro")
  idEncontro  String        @map("id_encontro")
  numeroCarro Int
  idExterna   String?
  id          String        @id @default(uuid())
  observacao  String?
  externa     Encontreiro?  @relation("PessoaResponsavelExterna", fields: [idExterna], references: [idPessoa])
  carro       Carro         @relation(fields: [idCarro], references: [id], onDelete: Cascade)
  encontro    Encontro      @relation(fields: [idEncontro], references: [id])
  encontrista Encontrista[]

  @@unique([idCarro, idEncontro])
  @@map("carro_encontro")
}

model ResponsavelExterna {
  idExterna     String      @map("id_externa")
  idEncontrista String      @unique @map("id_encontrista")
  idEncontro    String      @map("id_encontro")
  encontrista   Encontrista @relation(fields: [idEncontrista], references: [idPessoa], onDelete: Cascade)
  encontro      Encontro    @relation(fields: [idEncontro], references: [id])
  externa       Encontreiro @relation(fields: [idExterna], references: [idPessoa])

  @@id([idEncontrista, idEncontro])
  @@map("responsavel_externa")
}

model Carta {
  id              String                 @id @default(uuid())
  idCategoria     String                 @map("id_categoria")
  para            String
  de              String
  conteudo        String
  createdAt       DateTime               @default(now()) @map("created_at")
  slugEncontrista String
  isPrinted       Boolean                @default(false)
  categoria       DomainCategoriasCartas @relation(fields: [idCategoria], references: [id])
  pessoa          Pessoa                 @relation(fields: [slugEncontrista], references: [slug])

  @@map("cartas")
}

model ListaPreferencia {
  idPessoa    String        @map("id_pessoa")
  posicao     Int
  valueEquipe String        @map("value_equipe")
  encontreiro Encontreiro   @relation(fields: [idPessoa], references: [idPessoa], onDelete: Cascade)
  equipe      DomainEquipes @relation(fields: [valueEquipe], references: [equipeValue])

  @@id([idPessoa, posicao])
  @@map("lista_preferencia")
}

model EquipeEncontro {
  idPessoa        String
  idEncontro      String
  idEquipe        String
  coordenou       Boolean       @default(false)
  fichaPreenchida Boolean       @default(false) @map("ficha_preenchida")
  encontro        Encontro      @relation(fields: [idEncontro], references: [id])
  equipe          DomainEquipes @relation(fields: [idEquipe], references: [equipeValue])
  encontreiro     Encontreiro   @relation(fields: [idPessoa], references: [idPessoa], onDelete: Cascade)

  @@id([idPessoa, idEncontro])
  @@map("equipes_encontro")
}

model EquipeMontagem {
  coordenando   Boolean
  idEncontreiro String        @id @map("id_encontreiro")
  valueEquipe   String        @map("value_equipe")
  encontreiro   Encontreiro   @relation(fields: [idEncontreiro], references: [idPessoa])
  equipe        DomainEquipes @relation(fields: [valueEquipe], references: [equipeValue])

  @@map("equipes_montagem")
}

model Palestrantes {
  order      Int     @default(100)
  idEncontro String  @map("id_encontro")
  idPalestra Int     @map("id_palestra")
  nome       String?

  encontro Encontro        @relation(fields: [idEncontro], references: [id])
  palestra DomainPalestras @relation(fields: [idPalestra], references: [id])

  @@id([idEncontro, idPalestra])
  @@map("palestrantes")
}

model Lideranca {
  idPessoa String @map("id_pessoa")
  idFuncao String @map("id_funcao")
  ano      Int

  funcao DomainFuncoes @relation(fields: [idFuncao], references: [id])
  pessoa Pessoa        @relation(fields: [idPessoa], references: [id])

  @@id([idPessoa, ano])
  @@map("lideranca")
}

model Quadrante {
  value      Value_Quadrante @id @unique
  label      String
  imageUrl   String          @map("image_url")
  modifiedAt DateTime        @default(now()) @updatedAt @map("modified_at")

  @@map("quadrante")
}

model DomainCategoriasCartas {
  id    String  @id @unique
  label String
  carta Carta[]

  @@map("@categorias_cartas")
}

model DomainFuncoes {
  id        String      @id @unique
  label     String
  logo      String?
  lideranca Lideranca[]

  @@map("@funcoes")
}

model DomainPalestras {
  id           Int            @id @default(autoincrement())
  nome         String
  palestrantes Palestrantes[]

  @@map("@palestras")
}

model DomainStatus {
  id          Value_Status  @id @unique
  status      String        @unique
  encontrista Encontrista[]

  @@map("@status")
}

model DomainReligiao {
  id          Value_Religiao @id @unique
  religiao    String         @unique
  encontrista Encontrista[]

  @@map("@religiao")
}

model DomainBairroEncontro {
  id     Int    @id
  value  String @unique
  bairro String @unique
  zona   String

  @@map("@bairro_encontro")
}

model DomainMoraCom {
  id          Value_MoraCom @id @unique
  moraCom     String        @unique @map("mora_com")
  encontrista Encontrista[]

  @@map("@mora_com")
}

model DomainStatusPais {
  id          Value_StatusPais @id @unique
  statusPais  String           @unique @map("status_pais")
  encontrista Encontrista[]

  @@map("@status_pais")
}

model DomainTamanhoCamisa {
  id            Value_TamanhoCamisa @id @unique
  tamanhoCamisa String              @unique @map("tamanho_camisa")
  order         Int                 @default(100)
  encontreiro   Encontreiro[]

  @@map("@tamanho_camisa")
}

model DomainCorCirculo {
  id      Int       @id @default(autoincrement())
  cor     String    @unique
  circulo Circulo[]

  @@map("@cor_circulo")
}

model DomainDisponibilidade {
  id              Value_Disponibilidade @id @unique
  disponibilidade String                @unique
  descricao       String                @default("")
  order           Int                   @default(100)
  encontreiro     Encontreiro[]

  @@map("@disponibilidade")
}

model DomainEquipes {
  equipeLabel      String             @unique @map("equipe_label")
  equipeValue      String             @id @map("equipe_value")
  pastaUrl         String?            @map("pasta_url")
  description      String?
  EquipeEncontro   EquipeEncontro[]
  EquipeMontagem   EquipeMontagem[]
  ListaPreferencia ListaPreferencia[]

  @@map("@equipes")
}

model Account {
  type              String
  provider          String
  providerAccountId String   @map("provider_account_id")
  refreshToken      String?  @map("refresh_token")
  accessToken       String?  @map("access_token")
  expiresAt         Int?     @map("expires_at")
  tokenType         String?  @map("token_type")
  scope             String?
  idToken           String?  @map("id_token")
  sessionState      String?  @map("session_state")
  userId            String   @map("user_id")
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")
  user              Pessoa   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  sessionToken String   @unique @map("session_token")
  expires      DateTime
  userId       String   @map("user_id")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")
  user         Pessoa   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

enum Value_Quadrante {
  amarelo
  azul
  laranja
  verde
  vermelho
  capa_pb
  capa_colorida
  circulos_pb
  circulos_colorida
  equipe
  carta_padre
  carta_papa
  carta_diris
  qrcode
}

enum Value_Status {
  confirmado
  confirmado_sem_sexta
  desistiu
  ligar
  lista_espera
  nao_atende
  prox_encontro
  vai_pensar
  delete
}

enum Value_Religiao {
  catolica
  evangelica
  espirita
  matriz_africana
  judaica
  nao_tenho
  outra
}

enum Value_MoraCom {
  sozinho
  conjuge
  familiar
  amigos
}

enum Value_StatusPais {
  sim
  nao
  na
}

enum Value_TamanhoCamisa {
  p
  m
  g
  gg
  xgg
  outro
  pp
  xg
}

enum Role {
  ADMIN
  DIRIGENTE
  ENCONTREIRO
  COORDENADOR
  EXTERNA
  SECRETARIA
  ENCONTRISTA
  TIOEXTERNA
  TIOSECRETO
}

enum Value_Disponibilidade {
  MUITO_BAIXA
  BAIXA
  MEDIA
  ALTA
  MUITO_ALTA
  NAO_PREENCHEU
  INDISPONIVEL
}

enum StatusEncontreiro {
  ATIVO
  CONVIDADO_ESPECIAL
  INATIVO
}
