// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DATABASE_URL_UNPOOLED")
}

//Enums
enum Value_Status {
  confirmado
  confirmado_sem_sexta
  desistiu
  ligar
  lista_espera
  nao_atende
  prox_encontro
  vai_pensar
  delete
}

enum Value_Religiao {
  catolica
  evangelica
  espirita
  matriz_africana
  judaica
  nao_tenho
  outra
}

enum Value_MoraCom {
  sozinho
  conjuge
  familiar
  amigos
}

enum Value_StatusPais {
  sim
  nao
  na
}

enum Value_TamanhoCamisa {
  p
  m
  g
  gg
  xgg
  outro
}

enum Role {
  ADMIN
  DIRIGENTE
  ENCONTREIRO
  COORDENADOR
  EXTERNA
  SECRETARIA
  ENCONTRISTA
  TIOEXTERNA
  TIOSECRETO
}

model Pessoa {
  id          String  @id @default(uuid())
  nome        String
  sobrenome   String
  apelido     String?
  enderecoCep String  @map("endereco_cep")
  celular     String
  telefone    String?
  email       String  @unique
  password    String?
  avatarUrl   String? @map("avatar_url")
  slug        String?
  role        Role    @default(ENCONTRISTA)

  createdAt  DateTime @default(now()) @map("created_at")
  modifiedAt DateTime @updatedAt @map("modified_at")

  endereco           Endereco        @relation(fields: [enderecoCep], references: [cep])
  tioAparenteCirculo Circulo?        @relation("TioAparente")
  tioSecretoCirculo  Circulo?        @relation("TioSecreto")
  pessoaMotorista    Carro[]         @relation("PessoaMotorista")
  carroEncontro      CarroEncontro[]
  encontreiro        Encontreiro?
  encontrista        Encontrista?

  accounts Account[]
  sessions Session[]

  @@map("pessoas")
}

model Encontrista {
  idPessoa           String           @id @map("id_pessoa")
  idStatus           Value_Status     @map("id_status")
  idReligiao         Value_Religiao   @map("id_religiao")
  isAutofill         Boolean          @map("is_autofill")
  endNumero          Int              @map("end_numero")
  endComplemento     String           @map("end_complemento")
  idBairroEncontro   String           @map("id_bairro_encontro")
  idMoracom          Value_MoraCom    @map("id_moracom")
  idStatusPais       Value_StatusPais @map("id_statusPais")
  movimentoAnterior  String?          @map("movimento_anterior")
  observacao         String?
  nomeContato1       String           @map("nome_contato1")
  telContato1        String           @map("tel_contato1")
  parentescoContato1 String           @map("parentesco_contato1")
  nomeContato2       String?          @map("nome_contato2")
  telContato2        String?          @map("tel_contato2")
  parentescoContato2 String?          @map("parentesco_contato2")
  indicadoPorNome    String?          @map("indicado_por_nome")
  indicadoPorApelido String?          @map("indicado_por_apelido")
  indicadoPorTel     String?          @map("indicado_por_tel")
  indicadoPorEmail   String?          @map("indicado_por_email")

  createdAt  DateTime @default(now()) @map("created_at")
  modifiedAt DateTime @updatedAt @map("modified_at")

  pessoa             Pessoa               @relation(fields: [idPessoa], references: [id], onDelete: Cascade)
  status             DomainStatus         @relation(fields: [idStatus], references: [id])
  religiao           DomainReligiao       @relation(fields: [idReligiao], references: [id])
  bairroEncontro     DomainBairroEncontro @relation(fields: [idBairroEncontro], references: [value])
  moraCom            DomainMoraCom        @relation(fields: [idMoracom], references: [id])
  statusPais         DomainStatusPais     @relation(fields: [idStatusPais], references: [id])
  responsavelExterna ResponsavelExterna?
  cartas             Carta[]

  @@map("encontristas")
}

model Encontreiro {
  idPessoa           String               @id @map("id_pessoa")
  nascimento         String
  instagram          String?
  restricaoAlimentar String?              @map("restricao_alimentar")
  idTamanhoCamisa    Value_TamanhoCamisa? @map("id_tamanho_camisa")
  idEncontro         String?              @map("id_encontro")
  idCirculo          String?              @map("id_circulo")

  pessoa             Pessoa               @relation(fields: [idPessoa], references: [id], onDelete: Cascade)
  encontro           Encontro?            @relation(fields: [idEncontro], references: [id])
  tamanhoCamisa      DomainTamanhoCamisa? @relation(fields: [idTamanhoCamisa], references: [id])
  circulo            Circulo?             @relation(fields: [idCirculo], references: [id])
  responsavelExterna ResponsavelExterna[]

  @@map("encontreiros")
}

model Encontro {
  id             String   @id @default(uuid())
  numeroEncontro Int      @unique @map("numero_encontro")
  dataInicio     DateTime @unique @map("data_inicio")
  dataTema       DateTime @unique @map("data_tema")
  idLocal        String   @map("id_local")
  temaEspiritual String?  @map("tema_espiritual")
  temaFantasia   String?  @map("tema_fantasia")
  numeroCirculos Int      @map("numero_circulos")

  createdAt  DateTime @default(now()) @map("created_at")
  modifiedAt DateTime @updatedAt @map("modified_at")

  local              Local                @relation(fields: [idLocal], references: [id])
  encontreiro        Encontreiro[]
  circulo            Circulo[]
  carroEncontro      CarroEncontro[]
  ResponsavelExterna ResponsavelExterna[]

  @@map("encontros")
}

model Circulo {
  id                 String @id @default(uuid())
  idCorCirculo       Int    @map("id_cor_circulo")
  idTioAparente      String @unique @map("id_tio_aparente")
  idTioSecreto       String @unique @map("id_tio_secreto")
  numeroEncontristas Int    @map("numero_encontristas")
  idEncontro         String @map("id_encontro")

  encontro    Encontro         @relation(fields: [idEncontro], references: [id])
  corCirculo  DomainCorCirculo @relation(fields: [idCorCirculo], references: [id])
  tioAparente Pessoa?          @relation("TioAparente", fields: [idTioAparente], references: [id])
  tioSecreto  Pessoa?          @relation("TioSecreto", fields: [idTioSecreto], references: [id])
  encontreiro Encontreiro[]

  @@map("circulos")
}

model Endereco {
  cep    String @id
  estado String
  cidade String
  bairro String
  rua    String

  createdAt  DateTime @default(now()) @map("created_at")
  modifiedAt DateTime @updatedAt @map("modified_at")

  pessoa Pessoa[]
  local  Local[]

  @@map("enderecos")
}

model Local {
  id          String @id @default(uuid())
  enderecoCep String @map("endereco_cep")
  nomeLocal   String @map("nome_local")
  numeroLocal String @map("numero_local")

  endereco Endereco   @relation(fields: [enderecoCep], references: [cep])
  encontro Encontro[]

  @@map("locais")
}

model Carro {
  id                  String @id @default(uuid())
  idMotorista         String @map("id_motorista")
  modeloCarro         String @map("modelo_carro")
  placaCarro          String @map("placa_carro")
  lugaresCarro        Int    @map("lugares_carro")
  observacaoMotorista String @map("observacao_motorista")

  pessoaMotorista Pessoa          @relation("PessoaMotorista", fields: [idMotorista], references: [id])
  carroEncontro   CarroEncontro[]

  @@unique([idMotorista, placaCarro])
  @@map("carros")
}

model CarroEncontro {
  idCarro       String @map("id_carro")
  idEncontrista String @map("id_encontrista")
  idEncontro    String @map("id_encontro")

  carro       Carro    @relation(fields: [idCarro], references: [id])
  encontrista Pessoa   @relation(fields: [idEncontrista], references: [id])
  encontro    Encontro @relation(fields: [idEncontro], references: [id])

  @@id([idCarro, idEncontrista, idEncontro])
  @@map("carro_encontro")
}

model ResponsavelExterna {
  idExterna     String @map("id_externa")
  idEncontrista String @unique @map("id_encontrista")
  idEncontro    String @map("id_encontro")

  externa     Encontreiro @relation(fields: [idExterna], references: [idPessoa])
  encontrista Encontrista @relation(fields: [idEncontrista], references: [idPessoa], onDelete: Cascade)
  encontro    Encontro    @relation(fields: [idEncontro], references: [id])

  @@id([idEncontrista, idEncontro])
  @@map("responsavel_externa")
}

model Carta {
  id            String   @id @default(uuid())
  idEncontrista String
  para          String
  de            String
  conteudo      String   @db.Text
  createdAt     DateTime @default(now()) @map("created_at")

  encontrista Encontrista @relation(fields: [idEncontrista], references: [idPessoa])

  @@map("cartas")
}

//Domains

model DomainStatus {
  id     Value_Status @id @unique
  status String       @unique

  encontrista Encontrista[]

  @@map("@status")
}

model DomainReligiao {
  id       Value_Religiao @id @unique
  religiao String         @unique

  encontrista Encontrista[]

  @@map("@religiao")
}

model DomainBairroEncontro {
  id     Int    @id
  value  String @unique
  bairro String @unique
  zona   String

  encontrista Encontrista[]

  @@map("@bairro_encontro")
}

model DomainMoraCom {
  id      Value_MoraCom @id @unique
  moraCom String        @unique @map("mora_com")

  encontrista Encontrista[]

  @@map("@mora_com")
}

model DomainStatusPais {
  id         Value_StatusPais @id @unique
  statusPais String           @unique @map("status_pais")

  encontrista Encontrista[]

  @@map("@status_pais")
}

model DomainTamanhoCamisa {
  id            Value_TamanhoCamisa @id @unique
  tamanhoCamisa String              @unique @map("tamanho_camisa")

  encontreiro Encontreiro[]

  @@map("@tamanho_camisa")
}

model DomainCorCirculo {
  id  Int    @id @default(autoincrement())
  cor String @unique

  circulo Circulo[]

  @@map("@cor_circulo")
}

//Next-Auth/Prisma Adapter

model Account {
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refreshToken      String? @map("refresh_token")
  accessToken       String? @map("access_token")
  expiresAt         Int?    @map("expires_at")
  tokenType         String? @map("token_type")
  scope             String?
  idToken           String? @map("id_token")
  sessionState      String? @map("session_state")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  user Pessoa @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  user Pessoa @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

// model VerificationToken {
//   identifier String
//   token      String
//   expires    DateTime

//   @@unique([identifier, token])
//   @@map("verification_tokens")
// }
