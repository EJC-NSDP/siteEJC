import {
  FieldValues,
  Path,
  useFieldArray,
  UseFieldArrayProps,
  useFormContext,
} from 'react-hook-form'

type ItemWithOrder = { order: number }

export function useOrderedFieldArray<
  TFormValues extends FieldValues,
  TFieldName extends Path<TFormValues>,
  TItem extends ItemWithOrder = TFormValues[TFieldName] extends Array<infer U>
    ? U
    : never,
>(props: UseFieldArrayProps<TFormValues, TFieldName>) {
  const { getValues } = useFormContext<TFormValues>()
  const fieldArray = useFieldArray<TFormValues, TFieldName>(props)
  const { append, remove, move, update } = fieldArray

  const reorder = () => {
    const items = getValues(props.name) as TItem[]
    items.forEach((item, idx) => {
      update(idx, { ...item, order: idx + 1 })
    })
  }

  const orderedAppend = (item: Omit<TItem, 'order'>) => {
    const current = getValues(props.name) as TItem[]
    append({ ...item, order: current.length + 1 } as TItem)
  }

  const orderedRemove = (index: number) => {
    remove(index)
    requestAnimationFrame(() => reorder())
  }

  const moveUp = (index: number) => {
    const current = getValues(props.name) as TItem[]
    if (index > 0) {
      move(index, index - 1)
      requestAnimationFrame(() => reorder())
    }
  }

  const moveDown = (index: number) => {
    const current = getValues(props.name) as TItem[]
    if (index < current.length - 1) {
      move(index, index + 1)
      requestAnimationFrame(() => reorder())
    }
  }

  return {
    ...fieldArray,
    orderedAppend,
    orderedRemove,
    moveUp,
    moveDown,
    reorder,
  }
}
